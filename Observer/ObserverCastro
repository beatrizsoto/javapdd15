Observer
Propósito

Define una dependencia de uno-a-muchos entre
objetos de forma que, cuando un objeto cambia
de estado, se notifica a los objetos dependientes
para que se actualicen automáticamente.

http://arantxa.ii.uam.es/~eguerra/docencia/0809/09%20Observer.pdf

Consecuencias

Permite modificar sujetos y obser
vadores de manera independiente

Permite reutilizar un sujeto sin reut
ilizar sus observadores, y viceversa

Permite añadir observadores sin tener
que cambiar el sujeto ni los
demás observadores

Acoplamiento abstracto entre el sujeto
y el observador. El sujeto no
sabe la clase concreta de sus obs
ervadores (acoplamiento mínimo).

Soporte para
broadcast
. El sujeto envía la notificación a todos los
observadores suscritos. Se pueden añadir/quitar observadores.

Actualizaciones inesperadas. Una operación en el sujeto puede
desencadenar una cascada de cambio
s en sus observadores. El
protocolo no ofrece detalle
s sobre lo que ha cambiado.





CODIGO JAVA


public abstract class Subject {
protected List<Observer> _observers;
public Subject() {
_observers =
new LinkedList<Observer>();
}
public void attach(Observer o) {
_observers.add(o);
}
public void detach(Observer o) {
_observers.remove(o);
}
public void notify() {
Iterator<Observer> it;
it = _observers.iterator();
while (it.hasNext())
it.next().update();
}
}
public class Datasource
extends Subject {
private double _a, _b, _c, _d;
public double[] getState () {
double[] d = new double[4];
d[0] = _a;
d[1] = _b;
d[2] = _c;
d[3] = _d;
return d;
}
public void setState(double[] d){
_a = d[0];
_b = d[1];
_c = d[2];
_d = d[3];
this.notify();
}
}
