Observer
Propósito

Define una dependencia de uno-a-muchos entre
objetos de forma que, cuando un objeto cambia
de estado, se notifica a los objetos dependientes
para que se actualicen automáticamente.

UML
http://3.bp.blogspot.com/-AIAS9fRfLkQ/UVy_RM93UII/AAAAAAAAAu0/PUXCipikAZo/s1600/ObserverPattern2.PNG

Consecuencias

Permite modificar sujetos y obser
vadores de manera independiente

Permite reutilizar un sujeto sin reut
ilizar sus observadores, y viceversa

Permite añadir observadores sin tener
que cambiar el sujeto ni los
demás observadores

Acoplamiento abstracto entre el sujeto
y el observador. El sujeto no
sabe la clase concreta de sus obs
ervadores (acoplamiento mínimo).

Soporte para
broadcast
. El sujeto envía la notificación a todos los
observadores suscritos. Se pueden añadir/quitar observadores.

Actualizaciones inesperadas. Una operación en el sujeto puede
desencadenar una cascada de cambio
s en sus observadores. El
protocolo no ofrece detalle
s sobre lo que ha cambiado.





CODIGO JAVA

public class ClaseObservador extends Observable{
  
 private int colorSeleccionado;
 private String color;
  
 public ClaseObservador(){
   
 }
 public void setColorSeleccionado(int i) {
  this.colorSeleccionado = i;
  setChanged();
     notifyObservers();
 }
 public int getColorSeleccionado() {
  return colorSeleccionado;
 }
 public void setColor(String color) {
  this.color = color;
 }
 public String getColor() {
  return color;
 }
}



